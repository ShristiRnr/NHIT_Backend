// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: vendor.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createVendor = `-- name: CreateVendor :one
INSERT INTO vendors (
    s_no, from_account_type, status, project, account_name, short_name, parent,
    account_number, name_of_bank, ifsc_code_id, ifsc_code, vendor_type,
    vendor_code, vendor_name, vendor_email, vendor_mobile, activity_type,
    vendor_nick_name, email, mobile, gstin, pan, pin, country_id, state_id, city_id,
    country_name, state_name, city_name, msme_classification, msme,
    msme_registration_number, msme_start_date, msme_end_date, material_nature,
    gst_defaulted, section_206AB_verified, benificiary_name, remarks_address,
    common_bank_details, income_tax_type, file_path, active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7,
    $8, $9, $10, $11, $12,
    $13, $14, $15, $16, $17,
    $18, $19, $20, $21, $22, $23, $24, $25, $26,
    $27, $28, $29, $30, $31,
    $32, $33, $34, $35,
    $36, $37, $38, $39,
    $40, $41, $42, $43
) RETURNING id, s_no, from_account_type, status, project, account_name, short_name, parent, account_number, name_of_bank, ifsc_code_id, ifsc_code, vendor_type, vendor_code, vendor_name, vendor_email, vendor_mobile, activity_type, vendor_nick_name, email, mobile, gstin, pan, pin, country_id, state_id, city_id, country_name, state_name, city_name, msme_classification, msme, msme_registration_number, msme_start_date, msme_end_date, material_nature, gst_defaulted, section_206ab_verified, benificiary_name, remarks_address, common_bank_details, income_tax_type, file_path, active, created_at, updated_at
`

type CreateVendorParams struct {
	SNo                    sql.NullString
	FromAccountType        sql.NullString
	Status                 sql.NullString
	Project                sql.NullString
	AccountName            sql.NullString
	ShortName              sql.NullString
	Parent                 sql.NullString
	AccountNumber          string
	NameOfBank             string
	IfscCodeID             sql.NullString
	IfscCode               string
	VendorType             sql.NullString
	VendorCode             string
	VendorName             string
	VendorEmail            string
	VendorMobile           sql.NullString
	ActivityType           sql.NullString
	VendorNickName         sql.NullString
	Email                  sql.NullString
	Mobile                 sql.NullString
	Gstin                  sql.NullString
	Pan                    string
	Pin                    sql.NullString
	CountryID              sql.NullString
	StateID                sql.NullString
	CityID                 sql.NullString
	CountryName            sql.NullString
	StateName              sql.NullString
	CityName               sql.NullString
	MsmeClassification     sql.NullString
	Msme                   sql.NullString
	MsmeRegistrationNumber sql.NullString
	MsmeStartDate          sql.NullTime
	MsmeEndDate            sql.NullTime
	MaterialNature         sql.NullString
	GstDefaulted           sql.NullString
	Section206abVerified   sql.NullString
	BenificiaryName        string
	RemarksAddress         sql.NullString
	CommonBankDetails      sql.NullString
	IncomeTaxType          sql.NullString
	FilePath               pqtype.NullRawMessage
	Active                 string
}

func (q *Queries) CreateVendor(ctx context.Context, arg CreateVendorParams) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, createVendor,
		arg.SNo,
		arg.FromAccountType,
		arg.Status,
		arg.Project,
		arg.AccountName,
		arg.ShortName,
		arg.Parent,
		arg.AccountNumber,
		arg.NameOfBank,
		arg.IfscCodeID,
		arg.IfscCode,
		arg.VendorType,
		arg.VendorCode,
		arg.VendorName,
		arg.VendorEmail,
		arg.VendorMobile,
		arg.ActivityType,
		arg.VendorNickName,
		arg.Email,
		arg.Mobile,
		arg.Gstin,
		arg.Pan,
		arg.Pin,
		arg.CountryID,
		arg.StateID,
		arg.CityID,
		arg.CountryName,
		arg.StateName,
		arg.CityName,
		arg.MsmeClassification,
		arg.Msme,
		arg.MsmeRegistrationNumber,
		arg.MsmeStartDate,
		arg.MsmeEndDate,
		arg.MaterialNature,
		arg.GstDefaulted,
		arg.Section206abVerified,
		arg.BenificiaryName,
		arg.RemarksAddress,
		arg.CommonBankDetails,
		arg.IncomeTaxType,
		arg.FilePath,
		arg.Active,
	)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.SNo,
		&i.FromAccountType,
		&i.Status,
		&i.Project,
		&i.AccountName,
		&i.ShortName,
		&i.Parent,
		&i.AccountNumber,
		&i.NameOfBank,
		&i.IfscCodeID,
		&i.IfscCode,
		&i.VendorType,
		&i.VendorCode,
		&i.VendorName,
		&i.VendorEmail,
		&i.VendorMobile,
		&i.ActivityType,
		&i.VendorNickName,
		&i.Email,
		&i.Mobile,
		&i.Gstin,
		&i.Pan,
		&i.Pin,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CountryName,
		&i.StateName,
		&i.CityName,
		&i.MsmeClassification,
		&i.Msme,
		&i.MsmeRegistrationNumber,
		&i.MsmeStartDate,
		&i.MsmeEndDate,
		&i.MaterialNature,
		&i.GstDefaulted,
		&i.Section206abVerified,
		&i.BenificiaryName,
		&i.RemarksAddress,
		&i.CommonBankDetails,
		&i.IncomeTaxType,
		&i.FilePath,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVendor = `-- name: DeleteVendor :exec
DELETE FROM vendors WHERE id = $1
`

func (q *Queries) DeleteVendor(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVendor, id)
	return err
}

const getVendor = `-- name: GetVendor :one
SELECT id, s_no, from_account_type, status, project, account_name, short_name, parent, account_number, name_of_bank, ifsc_code_id, ifsc_code, vendor_type, vendor_code, vendor_name, vendor_email, vendor_mobile, activity_type, vendor_nick_name, email, mobile, gstin, pan, pin, country_id, state_id, city_id, country_name, state_name, city_name, msme_classification, msme, msme_registration_number, msme_start_date, msme_end_date, material_nature, gst_defaulted, section_206ab_verified, benificiary_name, remarks_address, common_bank_details, income_tax_type, file_path, active, created_at, updated_at FROM vendors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVendor(ctx context.Context, id uuid.UUID) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, getVendor, id)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.SNo,
		&i.FromAccountType,
		&i.Status,
		&i.Project,
		&i.AccountName,
		&i.ShortName,
		&i.Parent,
		&i.AccountNumber,
		&i.NameOfBank,
		&i.IfscCodeID,
		&i.IfscCode,
		&i.VendorType,
		&i.VendorCode,
		&i.VendorName,
		&i.VendorEmail,
		&i.VendorMobile,
		&i.ActivityType,
		&i.VendorNickName,
		&i.Email,
		&i.Mobile,
		&i.Gstin,
		&i.Pan,
		&i.Pin,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CountryName,
		&i.StateName,
		&i.CityName,
		&i.MsmeClassification,
		&i.Msme,
		&i.MsmeRegistrationNumber,
		&i.MsmeStartDate,
		&i.MsmeEndDate,
		&i.MaterialNature,
		&i.GstDefaulted,
		&i.Section206abVerified,
		&i.BenificiaryName,
		&i.RemarksAddress,
		&i.CommonBankDetails,
		&i.IncomeTaxType,
		&i.FilePath,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listVendors = `-- name: ListVendors :many
SELECT id, s_no, from_account_type, status, project, account_name, short_name, parent, account_number, name_of_bank, ifsc_code_id, ifsc_code, vendor_type, vendor_code, vendor_name, vendor_email, vendor_mobile, activity_type, vendor_nick_name, email, mobile, gstin, pan, pin, country_id, state_id, city_id, country_name, state_name, city_name, msme_classification, msme, msme_registration_number, msme_start_date, msme_end_date, material_nature, gst_defaulted, section_206ab_verified, benificiary_name, remarks_address, common_bank_details, income_tax_type, file_path, active, created_at, updated_at FROM vendors
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListVendorsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListVendors(ctx context.Context, arg ListVendorsParams) ([]Vendor, error) {
	rows, err := q.db.QueryContext(ctx, listVendors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vendor
	for rows.Next() {
		var i Vendor
		if err := rows.Scan(
			&i.ID,
			&i.SNo,
			&i.FromAccountType,
			&i.Status,
			&i.Project,
			&i.AccountName,
			&i.ShortName,
			&i.Parent,
			&i.AccountNumber,
			&i.NameOfBank,
			&i.IfscCodeID,
			&i.IfscCode,
			&i.VendorType,
			&i.VendorCode,
			&i.VendorName,
			&i.VendorEmail,
			&i.VendorMobile,
			&i.ActivityType,
			&i.VendorNickName,
			&i.Email,
			&i.Mobile,
			&i.Gstin,
			&i.Pan,
			&i.Pin,
			&i.CountryID,
			&i.StateID,
			&i.CityID,
			&i.CountryName,
			&i.StateName,
			&i.CityName,
			&i.MsmeClassification,
			&i.Msme,
			&i.MsmeRegistrationNumber,
			&i.MsmeStartDate,
			&i.MsmeEndDate,
			&i.MaterialNature,
			&i.GstDefaulted,
			&i.Section206abVerified,
			&i.BenificiaryName,
			&i.RemarksAddress,
			&i.CommonBankDetails,
			&i.IncomeTaxType,
			&i.FilePath,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchVendors = `-- name: SearchVendors :many
SELECT id, s_no, from_account_type, status, project, account_name, short_name, parent, account_number, name_of_bank, ifsc_code_id, ifsc_code, vendor_type, vendor_code, vendor_name, vendor_email, vendor_mobile, activity_type, vendor_nick_name, email, mobile, gstin, pan, pin, country_id, state_id, city_id, country_name, state_name, city_name, msme_classification, msme, msme_registration_number, msme_start_date, msme_end_date, material_nature, gst_defaulted, section_206ab_verified, benificiary_name, remarks_address, common_bank_details, income_tax_type, file_path, active, created_at, updated_at FROM vendors
WHERE vendor_name ILIKE '%' || $1 || '%'
   OR vendor_code ILIKE '%' || $1 || '%'
   OR vendor_email ILIKE '%' || $1 || '%'
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchVendorsParams struct {
	Column1 sql.NullString
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchVendors(ctx context.Context, arg SearchVendorsParams) ([]Vendor, error) {
	rows, err := q.db.QueryContext(ctx, searchVendors, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vendor
	for rows.Next() {
		var i Vendor
		if err := rows.Scan(
			&i.ID,
			&i.SNo,
			&i.FromAccountType,
			&i.Status,
			&i.Project,
			&i.AccountName,
			&i.ShortName,
			&i.Parent,
			&i.AccountNumber,
			&i.NameOfBank,
			&i.IfscCodeID,
			&i.IfscCode,
			&i.VendorType,
			&i.VendorCode,
			&i.VendorName,
			&i.VendorEmail,
			&i.VendorMobile,
			&i.ActivityType,
			&i.VendorNickName,
			&i.Email,
			&i.Mobile,
			&i.Gstin,
			&i.Pan,
			&i.Pin,
			&i.CountryID,
			&i.StateID,
			&i.CityID,
			&i.CountryName,
			&i.StateName,
			&i.CityName,
			&i.MsmeClassification,
			&i.Msme,
			&i.MsmeRegistrationNumber,
			&i.MsmeStartDate,
			&i.MsmeEndDate,
			&i.MaterialNature,
			&i.GstDefaulted,
			&i.Section206abVerified,
			&i.BenificiaryName,
			&i.RemarksAddress,
			&i.CommonBankDetails,
			&i.IncomeTaxType,
			&i.FilePath,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVendor = `-- name: UpdateVendor :one
UPDATE vendors SET
    s_no = $1,
    from_account_type = $2,
    status = $3,
    project = $4,
    account_name = $5,
    short_name = $6,
    parent = $7,
    account_number = $8,
    name_of_bank = $9,
    ifsc_code_id = $10,
    ifsc_code = $11,
    vendor_type = $12,
    vendor_code = $13,
    vendor_name = $14,
    vendor_email = $15,
    vendor_mobile = $16,
    activity_type = $17,
    vendor_nick_name = $18,
    email = $19,
    mobile = $20,
    gstin = $21,
    pan = $22,
    pin = $23,
    country_id = $24,
    state_id = $25,
    city_id = $26,
    country_name = $27,
    state_name = $28,
    city_name = $29,
    msme_classification = $30,
    msme = $31,
    msme_registration_number = $32,
    msme_start_date = $33,
    msme_end_date = $34,
    material_nature = $35,
    gst_defaulted = $36,
    section_206AB_verified = $37,
    benificiary_name = $38,
    remarks_address = $39,
    common_bank_details = $40,
    income_tax_type = $41,
    file_path = $42,
    active = $43
WHERE id = $44
RETURNING id, s_no, from_account_type, status, project, account_name, short_name, parent, account_number, name_of_bank, ifsc_code_id, ifsc_code, vendor_type, vendor_code, vendor_name, vendor_email, vendor_mobile, activity_type, vendor_nick_name, email, mobile, gstin, pan, pin, country_id, state_id, city_id, country_name, state_name, city_name, msme_classification, msme, msme_registration_number, msme_start_date, msme_end_date, material_nature, gst_defaulted, section_206ab_verified, benificiary_name, remarks_address, common_bank_details, income_tax_type, file_path, active, created_at, updated_at
`

type UpdateVendorParams struct {
	SNo                    sql.NullString
	FromAccountType        sql.NullString
	Status                 sql.NullString
	Project                sql.NullString
	AccountName            sql.NullString
	ShortName              sql.NullString
	Parent                 sql.NullString
	AccountNumber          string
	NameOfBank             string
	IfscCodeID             sql.NullString
	IfscCode               string
	VendorType             sql.NullString
	VendorCode             string
	VendorName             string
	VendorEmail            string
	VendorMobile           sql.NullString
	ActivityType           sql.NullString
	VendorNickName         sql.NullString
	Email                  sql.NullString
	Mobile                 sql.NullString
	Gstin                  sql.NullString
	Pan                    string
	Pin                    sql.NullString
	CountryID              sql.NullString
	StateID                sql.NullString
	CityID                 sql.NullString
	CountryName            sql.NullString
	StateName              sql.NullString
	CityName               sql.NullString
	MsmeClassification     sql.NullString
	Msme                   sql.NullString
	MsmeRegistrationNumber sql.NullString
	MsmeStartDate          sql.NullTime
	MsmeEndDate            sql.NullTime
	MaterialNature         sql.NullString
	GstDefaulted           sql.NullString
	Section206abVerified   sql.NullString
	BenificiaryName        string
	RemarksAddress         sql.NullString
	CommonBankDetails      sql.NullString
	IncomeTaxType          sql.NullString
	FilePath               pqtype.NullRawMessage
	Active                 string
	ID                     uuid.UUID
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, updateVendor,
		arg.SNo,
		arg.FromAccountType,
		arg.Status,
		arg.Project,
		arg.AccountName,
		arg.ShortName,
		arg.Parent,
		arg.AccountNumber,
		arg.NameOfBank,
		arg.IfscCodeID,
		arg.IfscCode,
		arg.VendorType,
		arg.VendorCode,
		arg.VendorName,
		arg.VendorEmail,
		arg.VendorMobile,
		arg.ActivityType,
		arg.VendorNickName,
		arg.Email,
		arg.Mobile,
		arg.Gstin,
		arg.Pan,
		arg.Pin,
		arg.CountryID,
		arg.StateID,
		arg.CityID,
		arg.CountryName,
		arg.StateName,
		arg.CityName,
		arg.MsmeClassification,
		arg.Msme,
		arg.MsmeRegistrationNumber,
		arg.MsmeStartDate,
		arg.MsmeEndDate,
		arg.MaterialNature,
		arg.GstDefaulted,
		arg.Section206abVerified,
		arg.BenificiaryName,
		arg.RemarksAddress,
		arg.CommonBankDetails,
		arg.IncomeTaxType,
		arg.FilePath,
		arg.Active,
		arg.ID,
	)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.SNo,
		&i.FromAccountType,
		&i.Status,
		&i.Project,
		&i.AccountName,
		&i.ShortName,
		&i.Parent,
		&i.AccountNumber,
		&i.NameOfBank,
		&i.IfscCodeID,
		&i.IfscCode,
		&i.VendorType,
		&i.VendorCode,
		&i.VendorName,
		&i.VendorEmail,
		&i.VendorMobile,
		&i.ActivityType,
		&i.VendorNickName,
		&i.Email,
		&i.Mobile,
		&i.Gstin,
		&i.Pan,
		&i.Pin,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CountryName,
		&i.StateName,
		&i.CityName,
		&i.MsmeClassification,
		&i.Msme,
		&i.MsmeRegistrationNumber,
		&i.MsmeStartDate,
		&i.MsmeEndDate,
		&i.MaterialNature,
		&i.GstDefaulted,
		&i.Section206abVerified,
		&i.BenificiaryName,
		&i.RemarksAddress,
		&i.CommonBankDetails,
		&i.IncomeTaxType,
		&i.FilePath,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

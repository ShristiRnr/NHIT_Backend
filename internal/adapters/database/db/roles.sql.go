// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: roles.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id)
VALUES ($1, $2)
ON CONFLICT (role_id, permission_id) DO NOTHING
`

type AssignPermissionToRoleParams struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
ON CONFLICT (user_id, role_id) DO NOTHING
`

type AssignRoleToUserParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (tenant_id, name)
VALUES ($1, $2)
RETURNING role_id, tenant_id, name, created_at, updated_at
`

type CreateRoleParams struct {
	TenantID uuid.UUID
	Name     string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.TenantID, arg.Name)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.TenantID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, roleID)
	return err
}

const getRole = `-- name: GetRole :one
SELECT role_id, tenant_id, name, created_at, updated_at
FROM roles
WHERE role_id = $1
`

func (q *Queries) GetRole(ctx context.Context, roleID uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, roleID)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.TenantID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByEmail = `-- name: GetRoleByEmail :one
SELECT r.role_id, r.tenant_id, r.name, r.created_at, r.updated_at
FROM roles r
JOIN user_roles ur ON ur.role_id = r.role_id
JOIN users u ON ur.user_id = u.user_id
WHERE u.email = $1
`

func (q *Queries) GetRoleByEmail(ctx context.Context, email string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByEmail, email)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.TenantID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPermissionsOfUserViaRoles = `-- name: ListPermissionsOfUserViaRoles :many
SELECT p.permission_id, p.name, p.description, p.created_at, p.updated_at
FROM permissions p
JOIN role_permissions rp ON rp.permission_id = p.permission_id
JOIN user_roles ur ON ur.role_id = rp.role_id
WHERE ur.user_id = $1
`

func (q *Queries) ListPermissionsOfUserViaRoles(ctx context.Context, userID uuid.UUID) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, listPermissionsOfUserViaRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.PermissionID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesByTenant = `-- name: ListRolesByTenant :many
SELECT role_id, tenant_id, name, created_at, updated_at
FROM roles
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListRolesByTenant(ctx context.Context, tenantID uuid.UUID) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRolesByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.RoleID,
			&i.TenantID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesOfUser = `-- name: ListRolesOfUser :many
SELECT r.role_id, r.tenant_id, r.name, r.created_at, r.updated_at
FROM roles r
JOIN user_roles ur ON ur.role_id = r.role_id
WHERE ur.user_id = $1
`

func (q *Queries) ListRolesOfUser(ctx context.Context, userID uuid.UUID) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRolesOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.RoleID,
			&i.TenantID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSuperAdmins = `-- name: ListSuperAdmins :many
SELECT u.user_id, u.name, u.email
FROM users u
JOIN user_roles ur ON u.user_id = ur.user_id
JOIN roles r ON ur.role_id = r.role_id
WHERE r.name = 'super_admin'
`

type ListSuperAdminsRow struct {
	UserID uuid.UUID
	Name   string
	Email  string
}

func (q *Queries) ListSuperAdmins(ctx context.Context) ([]ListSuperAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSuperAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSuperAdminsRow
	for rows.Next() {
		var i ListSuperAdminsRow
		if err := rows.Scan(&i.UserID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET name = $2, updated_at = now()
WHERE role_id = $1
RETURNING role_id, tenant_id, name, created_at, updated_at
`

type UpdateRoleParams struct {
	RoleID uuid.UUID
	Name   string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.RoleID, arg.Name)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.TenantID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

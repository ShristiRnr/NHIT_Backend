// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: password_reset.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_resets (email, token, expires_at, created_at)
VALUES ($1, $2, $3, NOW())
RETURNING token, email, expires_at, created_at
`

type CreatePasswordResetTokenParams struct {
	Email     string
	Token     uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordReset, error) {
	row := q.db.QueryRowContext(ctx, createPasswordResetToken, arg.Email, arg.Token, arg.ExpiresAt)
	var i PasswordReset
	err := row.Scan(
		&i.Token,
		&i.Email,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePasswordResetToken = `-- name: DeletePasswordResetToken :exec
DELETE FROM password_resets
WHERE token = $1
`

func (q *Queries) DeletePasswordResetToken(ctx context.Context, token uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePasswordResetToken, token)
	return err
}

const getPasswordResetByToken = `-- name: GetPasswordResetByToken :one
SELECT token, email, expires_at, created_at
FROM password_resets
WHERE token = $1
`

func (q *Queries) GetPasswordResetByToken(ctx context.Context, token uuid.UUID) (PasswordReset, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetByToken, token)
	var i PasswordReset
	err := row.Scan(
		&i.Token,
		&i.Email,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

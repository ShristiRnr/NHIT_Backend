// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: designation.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createDesignation = `-- name: CreateDesignation :one
INSERT INTO designations (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at, updated_at
`

type CreateDesignationParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateDesignation(ctx context.Context, arg CreateDesignationParams) (Designation, error) {
	row := q.db.QueryRowContext(ctx, createDesignation, arg.Name, arg.Description)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDesignation = `-- name: DeleteDesignation :exec
DELETE FROM designations
WHERE id = $1
`

func (q *Queries) DeleteDesignation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDesignation, id)
	return err
}

const getDesignation = `-- name: GetDesignation :one
SELECT id, name, description, created_at, updated_at
FROM designations
WHERE id = $1
`

func (q *Queries) GetDesignation(ctx context.Context, id uuid.UUID) (Designation, error) {
	row := q.db.QueryRowContext(ctx, getDesignation, id)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDesignations = `-- name: ListDesignations :many
SELECT id, name, description, created_at, updated_at
FROM designations
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListDesignationsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListDesignations(ctx context.Context, arg ListDesignationsParams) ([]Designation, error) {
	rows, err := q.db.QueryContext(ctx, listDesignations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Designation
	for rows.Next() {
		var i Designation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDesignation = `-- name: UpdateDesignation :one
UPDATE designations
SET name = $2,
    description = $3,
    updated_at = now()
WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

type UpdateDesignationParams struct {
	ID          uuid.UUID
	Name        string
	Description string
}

func (q *Queries) UpdateDesignation(ctx context.Context, arg UpdateDesignationParams) (Designation, error) {
	row := q.db.QueryRowContext(ctx, updateDesignation, arg.ID, arg.Name, arg.Description)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

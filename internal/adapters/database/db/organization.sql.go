// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: organization.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (tenant_id, name)
VALUES ($1, $2)
RETURNING org_id, tenant_id, name, created_at, updated_at
`

type CreateOrganizationParams struct {
	TenantID uuid.UUID
	Name     string
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.TenantID, arg.Name)
	var i Organization
	err := row.Scan(
		&i.OrgID,
		&i.TenantID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE org_id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, orgID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, orgID)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT org_id, tenant_id, name, created_at, updated_at
FROM organizations
WHERE org_id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, orgID uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, orgID)
	var i Organization
	err := row.Scan(
		&i.OrgID,
		&i.TenantID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrganizationsByTenant = `-- name: ListOrganizationsByTenant :many
SELECT org_id, tenant_id, name, created_at, updated_at
FROM organizations
WHERE tenant_id = $1
`

func (q *Queries) ListOrganizationsByTenant(ctx context.Context, tenantID uuid.UUID) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationsByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.OrgID,
			&i.TenantID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET name = $2,
    updated_at = now()
WHERE org_id = $1
RETURNING org_id, tenant_id, name, created_at, updated_at
`

type UpdateOrganizationParams struct {
	OrgID uuid.UUID
	Name  string
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.OrgID, arg.Name)
	var i Organization
	err := row.Scan(
		&i.OrgID,
		&i.TenantID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenants.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name, super_admin_user_id)
VALUES ($1, $2)
RETURNING tenant_id, name, super_admin_user_id, created_at, updated_at
`

type CreateTenantParams struct {
	Name             string
	SuperAdminUserID uuid.NullUUID
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant, arg.Name, arg.SuperAdminUserID)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.Name,
		&i.SuperAdminUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenant = `-- name: GetTenant :one
SELECT tenant_id, name, super_admin_user_id, created_at, updated_at
FROM tenants
WHERE tenant_id = $1
`

func (q *Queries) GetTenant(ctx context.Context, tenantID uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenant, tenantID)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.Name,
		&i.SuperAdminUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

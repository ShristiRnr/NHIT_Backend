// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_login.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createLoginHistory = `-- name: CreateLoginHistory :one
INSERT INTO user_login_history (user_id, ip_address, user_agent)
VALUES ($1, $2, $3)
RETURNING history_id, user_id, ip_address, user_agent, login_time
`

type CreateLoginHistoryParams struct {
	UserID    uuid.NullUUID
	IpAddress sql.NullString
	UserAgent sql.NullString
}

func (q *Queries) CreateLoginHistory(ctx context.Context, arg CreateLoginHistoryParams) (UserLoginHistory, error) {
	row := q.db.QueryRowContext(ctx, createLoginHistory, arg.UserID, arg.IpAddress, arg.UserAgent)
	var i UserLoginHistory
	err := row.Scan(
		&i.HistoryID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.LoginTime,
	)
	return i, err
}

const listUserLoginHistories = `-- name: ListUserLoginHistories :many
SELECT history_id, user_id, ip_address, user_agent, login_time
FROM user_login_history
WHERE user_id = $1
ORDER BY login_time DESC
LIMIT $2 OFFSET $3
`

type ListUserLoginHistoriesParams struct {
	UserID uuid.NullUUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListUserLoginHistories(ctx context.Context, arg ListUserLoginHistoriesParams) ([]UserLoginHistory, error) {
	rows, err := q.db.QueryContext(ctx, listUserLoginHistories, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserLoginHistory
	for rows.Next() {
		var i UserLoginHistory
		if err := rows.Scan(
			&i.HistoryID,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.LoginTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

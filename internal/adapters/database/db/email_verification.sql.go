// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: email_verification.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteEmailVerificationByUserID = `-- name: DeleteEmailVerificationByUserID :exec
DELETE FROM email_verifications WHERE user_id = $1
`

func (q *Queries) DeleteEmailVerificationByUserID(ctx context.Context, userID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmailVerificationByUserID, userID)
	return err
}

const getEmailVerificationByToken = `-- name: GetEmailVerificationByToken :one
SELECT user_id, token, created_at FROM email_verifications WHERE token = $1
`

func (q *Queries) GetEmailVerificationByToken(ctx context.Context, token uuid.UUID) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerificationByToken, token)
	var i EmailVerification
	err := row.Scan(&i.UserID, &i.Token, &i.CreatedAt)
	return i, err
}

const insertEmailVerification = `-- name: InsertEmailVerification :one
INSERT INTO email_verifications (user_id, token, created_at)
VALUES ($1, $2, NOW())
RETURNING user_id, token, created_at
`

type InsertEmailVerificationParams struct {
	UserID uuid.NullUUID
	Token  uuid.UUID
}

func (q *Queries) InsertEmailVerification(ctx context.Context, arg InsertEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, insertEmailVerification, arg.UserID, arg.Token)
	var i EmailVerification
	err := row.Scan(&i.UserID, &i.Token, &i.CreatedAt)
	return i, err
}

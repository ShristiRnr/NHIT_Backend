// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (tenant_id, name, email, password, email_verified_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id, tenant_id, name, emp_id, number, email, password, active, account_holder, bank_name, bank_account, ifsc_code, designation_id, department_id, email_verified_at, last_login_at, last_logout_at, last_login_ip, user_agent, created_at, updated_at
`

type CreateUserParams struct {
	TenantID        uuid.UUID
	Name            string
	Email           string
	Password        string
	EmailVerifiedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.TenantID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.EmailVerifiedAt,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.Name,
		&i.EmpID,
		&i.Number,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.AccountHolder,
		&i.BankName,
		&i.BankAccount,
		&i.IfscCode,
		&i.DesignationID,
		&i.DepartmentID,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.LastLogoutAt,
		&i.LastLoginIp,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, tenant_id, name, emp_id, number, email, password, active, account_holder, bank_name, bank_account, ifsc_code, designation_id, department_id, email_verified_at, last_login_at, last_logout_at, last_login_ip, user_agent, created_at, updated_at
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.Name,
		&i.EmpID,
		&i.Number,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.AccountHolder,
		&i.BankName,
		&i.BankAccount,
		&i.IfscCode,
		&i.DesignationID,
		&i.DepartmentID,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.LastLogoutAt,
		&i.LastLoginIp,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, tenant_id, name, emp_id, number, email, password, active, account_holder, bank_name, bank_account, ifsc_code, designation_id, department_id, email_verified_at, last_login_at, last_logout_at, last_login_ip, user_agent, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.Name,
		&i.EmpID,
		&i.Number,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.AccountHolder,
		&i.BankName,
		&i.BankAccount,
		&i.IfscCode,
		&i.DesignationID,
		&i.DepartmentID,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.LastLogoutAt,
		&i.LastLoginIp,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT u.user_id, u.tenant_id, u.name, u.emp_id, u.number, u.email, u.password, u.active, u.account_holder, u.bank_name, u.bank_account, u.ifsc_code, u.designation_id, u.department_id, u.email_verified_at, u.last_login_at, u.last_logout_at, u.last_login_ip, u.user_agent, u.created_at, u.updated_at
FROM users u
JOIN sessions s ON s.user_id = u.user_id
WHERE s.token = $1
  AND s.expires_at > NOW()
`

func (q *Queries) GetUserByToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.Name,
		&i.EmpID,
		&i.Number,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.AccountHolder,
		&i.BankName,
		&i.BankAccount,
		&i.IfscCode,
		&i.DesignationID,
		&i.DepartmentID,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.LastLogoutAt,
		&i.LastLoginIp,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, userID)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT p.name AS permission_name
FROM permissions p
JOIN role_permissions rp ON rp.permission_id = p.permission_id
JOIN user_roles ur ON ur.role_id = rp.role_id
WHERE ur.user_id = $1
`

func (q *Queries) GetUserPermissions(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var permission_name string
		if err := rows.Scan(&permission_name); err != nil {
			return nil, err
		}
		items = append(items, permission_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByTenant = `-- name: ListUsersByTenant :many
SELECT user_id, tenant_id, name, emp_id, number, email, password, active, account_holder, bank_name, bank_account, ifsc_code, designation_id, department_id, email_verified_at, last_login_at, last_logout_at, last_login_ip, user_agent, created_at, updated_at
FROM users
WHERE tenant_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUsersByTenantParams struct {
	TenantID uuid.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListUsersByTenant(ctx context.Context, arg ListUsersByTenantParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.TenantID,
			&i.Name,
			&i.EmpID,
			&i.Number,
			&i.Email,
			&i.Password,
			&i.Active,
			&i.AccountHolder,
			&i.BankName,
			&i.BankAccount,
			&i.IfscCode,
			&i.DesignationID,
			&i.DepartmentID,
			&i.EmailVerifiedAt,
			&i.LastLoginAt,
			&i.LastLogoutAt,
			&i.LastLoginIp,
			&i.UserAgent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEmailVerified = `-- name: MarkEmailVerified :exec
UPDATE users
SET email_verified_at = NOW()
WHERE user_id = $1
`

func (q *Queries) MarkEmailVerified(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markEmailVerified, userID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2,
    email = $3,
    password = $4,
    updated_at = now()
WHERE user_id = $1
RETURNING user_id, tenant_id, name, emp_id, number, email, password, active, account_holder, bank_name, bank_account, ifsc_code, designation_id, department_id, email_verified_at, last_login_at, last_logout_at, last_login_ip, user_agent, created_at, updated_at
`

type UpdateUserParams struct {
	UserID   uuid.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.Name,
		&i.EmpID,
		&i.Number,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.AccountHolder,
		&i.BankName,
		&i.BankAccount,
		&i.IfscCode,
		&i.DesignationID,
		&i.DepartmentID,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.LastLogoutAt,
		&i.LastLoginIp,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $2,
    updated_at = NOW()
WHERE user_id = $1
RETURNING user_id, tenant_id, name, emp_id, number, email, password, active, account_holder, bank_name, bank_account, ifsc_code, designation_id, department_id, email_verified_at, last_login_at, last_logout_at, last_login_ip, user_agent, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	UserID   uuid.UUID
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.UserID, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.Name,
		&i.EmpID,
		&i.Number,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.AccountHolder,
		&i.BankName,
		&i.BankAccount,
		&i.IfscCode,
		&i.DesignationID,
		&i.DepartmentID,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.LastLogoutAt,
		&i.LastLoginIp,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

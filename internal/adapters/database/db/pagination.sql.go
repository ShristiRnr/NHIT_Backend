// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pagination.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countUsersByTenant = `-- name: CountUsersByTenant :one
SELECT COUNT(*)
FROM users
WHERE tenant_id = $1
`

func (q *Queries) CountUsersByTenant(ctx context.Context, tenantID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsersByTenant, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const paginatedUsersByTenant = `-- name: PaginatedUsersByTenant :many
SELECT user_id, tenant_id, name, emp_id, number, email, password, active, account_holder, bank_name, bank_account, ifsc_code, designation_id, department_id, email_verified_at, last_login_at, last_logout_at, last_login_ip, user_agent, created_at, updated_at
FROM users
WHERE tenant_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type PaginatedUsersByTenantParams struct {
	TenantID uuid.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) PaginatedUsersByTenant(ctx context.Context, arg PaginatedUsersByTenantParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, paginatedUsersByTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.TenantID,
			&i.Name,
			&i.EmpID,
			&i.Number,
			&i.Email,
			&i.Password,
			&i.Active,
			&i.AccountHolder,
			&i.BankName,
			&i.BankAccount,
			&i.IfscCode,
			&i.DesignationID,
			&i.DepartmentID,
			&i.EmailVerifiedAt,
			&i.LastLoginAt,
			&i.LastLogoutAt,
			&i.LastLoginIp,
			&i.UserAgent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

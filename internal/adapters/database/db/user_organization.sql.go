// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_organization.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addUserToOrganization = `-- name: AddUserToOrganization :exec
INSERT INTO user_organizations (user_id, org_id, role_id)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, org_id) DO UPDATE
SET role_id = EXCLUDED.role_id
`

type AddUserToOrganizationParams struct {
	UserID uuid.UUID
	OrgID  uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) AddUserToOrganization(ctx context.Context, arg AddUserToOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, addUserToOrganization, arg.UserID, arg.OrgID, arg.RoleID)
	return err
}

const listUsersByOrganization = `-- name: ListUsersByOrganization :many
SELECT u.user_id, u.name, u.email, ur.role_id, r.name AS role_name
FROM users u
JOIN user_organizations ur ON ur.user_id = u.user_id
JOIN roles r ON r.role_id = ur.role_id
WHERE ur.org_id = $1
`

type ListUsersByOrganizationRow struct {
	UserID   uuid.UUID
	Name     string
	Email    string
	RoleID   uuid.UUID
	RoleName string
}

func (q *Queries) ListUsersByOrganization(ctx context.Context, orgID uuid.UUID) ([]ListUsersByOrganizationRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByOrganization, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersByOrganizationRow
	for rows.Next() {
		var i ListUsersByOrganizationRow
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.RoleID,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: designation.proto

package designationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DesignationService_CreateDesignation_FullMethodName = "/designations.DesignationService/CreateDesignation"
	DesignationService_GetDesignation_FullMethodName    = "/designations.DesignationService/GetDesignation"
	DesignationService_UpdateDesignation_FullMethodName = "/designations.DesignationService/UpdateDesignation"
	DesignationService_DeleteDesignation_FullMethodName = "/designations.DesignationService/DeleteDesignation"
	DesignationService_ListDesignations_FullMethodName  = "/designations.DesignationService/ListDesignations"
)

// DesignationServiceClient is the client API for DesignationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DesignationServiceClient interface {
	CreateDesignation(ctx context.Context, in *CreateDesignationRequest, opts ...grpc.CallOption) (*DesignationResponse, error)
	GetDesignation(ctx context.Context, in *GetDesignationRequest, opts ...grpc.CallOption) (*DesignationResponse, error)
	UpdateDesignation(ctx context.Context, in *UpdateDesignationRequest, opts ...grpc.CallOption) (*DesignationResponse, error)
	DeleteDesignation(ctx context.Context, in *DeleteDesignationRequest, opts ...grpc.CallOption) (*DeleteDesignationResponse, error)
	ListDesignations(ctx context.Context, in *ListDesignationsRequest, opts ...grpc.CallOption) (*ListDesignationsResponse, error)
}

type designationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDesignationServiceClient(cc grpc.ClientConnInterface) DesignationServiceClient {
	return &designationServiceClient{cc}
}

func (c *designationServiceClient) CreateDesignation(ctx context.Context, in *CreateDesignationRequest, opts ...grpc.CallOption) (*DesignationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DesignationResponse)
	err := c.cc.Invoke(ctx, DesignationService_CreateDesignation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designationServiceClient) GetDesignation(ctx context.Context, in *GetDesignationRequest, opts ...grpc.CallOption) (*DesignationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DesignationResponse)
	err := c.cc.Invoke(ctx, DesignationService_GetDesignation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designationServiceClient) UpdateDesignation(ctx context.Context, in *UpdateDesignationRequest, opts ...grpc.CallOption) (*DesignationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DesignationResponse)
	err := c.cc.Invoke(ctx, DesignationService_UpdateDesignation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designationServiceClient) DeleteDesignation(ctx context.Context, in *DeleteDesignationRequest, opts ...grpc.CallOption) (*DeleteDesignationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDesignationResponse)
	err := c.cc.Invoke(ctx, DesignationService_DeleteDesignation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designationServiceClient) ListDesignations(ctx context.Context, in *ListDesignationsRequest, opts ...grpc.CallOption) (*ListDesignationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDesignationsResponse)
	err := c.cc.Invoke(ctx, DesignationService_ListDesignations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DesignationServiceServer is the server API for DesignationService service.
// All implementations must embed UnimplementedDesignationServiceServer
// for forward compatibility.
type DesignationServiceServer interface {
	CreateDesignation(context.Context, *CreateDesignationRequest) (*DesignationResponse, error)
	GetDesignation(context.Context, *GetDesignationRequest) (*DesignationResponse, error)
	UpdateDesignation(context.Context, *UpdateDesignationRequest) (*DesignationResponse, error)
	DeleteDesignation(context.Context, *DeleteDesignationRequest) (*DeleteDesignationResponse, error)
	ListDesignations(context.Context, *ListDesignationsRequest) (*ListDesignationsResponse, error)
	mustEmbedUnimplementedDesignationServiceServer()
}

// UnimplementedDesignationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDesignationServiceServer struct{}

func (UnimplementedDesignationServiceServer) CreateDesignation(context.Context, *CreateDesignationRequest) (*DesignationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDesignation not implemented")
}
func (UnimplementedDesignationServiceServer) GetDesignation(context.Context, *GetDesignationRequest) (*DesignationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesignation not implemented")
}
func (UnimplementedDesignationServiceServer) UpdateDesignation(context.Context, *UpdateDesignationRequest) (*DesignationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDesignation not implemented")
}
func (UnimplementedDesignationServiceServer) DeleteDesignation(context.Context, *DeleteDesignationRequest) (*DeleteDesignationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDesignation not implemented")
}
func (UnimplementedDesignationServiceServer) ListDesignations(context.Context, *ListDesignationsRequest) (*ListDesignationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDesignations not implemented")
}
func (UnimplementedDesignationServiceServer) mustEmbedUnimplementedDesignationServiceServer() {}
func (UnimplementedDesignationServiceServer) testEmbeddedByValue()                            {}

// UnsafeDesignationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DesignationServiceServer will
// result in compilation errors.
type UnsafeDesignationServiceServer interface {
	mustEmbedUnimplementedDesignationServiceServer()
}

func RegisterDesignationServiceServer(s grpc.ServiceRegistrar, srv DesignationServiceServer) {
	// If the following call pancis, it indicates UnimplementedDesignationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DesignationService_ServiceDesc, srv)
}

func _DesignationService_CreateDesignation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDesignationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignationServiceServer).CreateDesignation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignationService_CreateDesignation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignationServiceServer).CreateDesignation(ctx, req.(*CreateDesignationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignationService_GetDesignation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignationServiceServer).GetDesignation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignationService_GetDesignation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignationServiceServer).GetDesignation(ctx, req.(*GetDesignationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignationService_UpdateDesignation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDesignationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignationServiceServer).UpdateDesignation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignationService_UpdateDesignation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignationServiceServer).UpdateDesignation(ctx, req.(*UpdateDesignationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignationService_DeleteDesignation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDesignationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignationServiceServer).DeleteDesignation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignationService_DeleteDesignation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignationServiceServer).DeleteDesignation(ctx, req.(*DeleteDesignationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignationService_ListDesignations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDesignationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignationServiceServer).ListDesignations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignationService_ListDesignations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignationServiceServer).ListDesignations(ctx, req.(*ListDesignationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DesignationService_ServiceDesc is the grpc.ServiceDesc for DesignationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DesignationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "designations.DesignationService",
	HandlerType: (*DesignationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDesignation",
			Handler:    _DesignationService_CreateDesignation_Handler,
		},
		{
			MethodName: "GetDesignation",
			Handler:    _DesignationService_GetDesignation_Handler,
		},
		{
			MethodName: "UpdateDesignation",
			Handler:    _DesignationService_UpdateDesignation_Handler,
		},
		{
			MethodName: "DeleteDesignation",
			Handler:    _DesignationService_DeleteDesignation_Handler,
		},
		{
			MethodName: "ListDesignations",
			Handler:    _DesignationService_ListDesignations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "designation.proto",
}

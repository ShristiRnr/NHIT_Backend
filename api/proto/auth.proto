syntax = "proto3";

package auth;

option go_package = "github.com/ShristiRnr/NHIT_Backend/api/authpb;authpb";

import "google/protobuf/timestamp.proto";

// ------------------------------
// Middleware metadata (for gRPC interceptors)
// ------------------------------
message AuthMetadata {
  string token = 1;           // JWT / session token
  repeated string permissions = 2; // For role-based access control
}

// ------------------------------
// User Model (reuse existing User fields)
// ------------------------------
message User {
  string user_id = 1;
  string name = 2;
  string email = 3;
  google.protobuf.Timestamp email_verified_at = 4;
  google.protobuf.Timestamp last_login_at = 5;
  google.protobuf.Timestamp last_logout_at = 6;
  string last_login_ip = 7;
  string user_agent = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  repeated string roles = 11;       // Role names
  repeated string permissions = 12; // Derived from roles
}


// ------------------------------
// Empty Response
// ------------------------------
message Empty {}

// ------------------------------
// Login
// ------------------------------
message LoginRequest {
  string email = 1; // Use email only for login to avoid duplicate UserRepository queries
  string password = 2;
}

message LoginResponse {
  User user = 1;
  string token = 2; // JWT / session token
}

// ------------------------------
// Logout
// ------------------------------
message LogoutRequest {
  string token = 1;
}

// ------------------------------
// Register
// ------------------------------
message RegisterRequest {
  string name = 1;
  string emp_id = 2;
  string number = 3;
  string email = 4;
  string password = 5;
  string password_confirmation = 6;
  repeated string roles = 7;
  string active = 8;
  string account_holder = 9;
  string bank_name = 10;
  string bank_account = 11;
  string ifsc_code = 12;
  string designation_id = 13;
  string department_id = 14;
}

message RegisterResponse {
  User user = 1;
  string token = 2;
}

// ------------------------------
// Forgot Password
// ------------------------------
message ForgotPasswordRequest {
  string email = 1;
}

message ForgotPasswordResponse {
  string message = 1;
}

// ------------------------------
// Reset Password
// ------------------------------
message ResetPasswordRequest {
  string token = 1;
  string email = 2;
  string password = 3;
  string password_confirmation = 4;
}

message ResetPasswordResponse {
  string message = 1;
}

// ------------------------------
// Confirm Password
// ------------------------------
message ConfirmPasswordRequest {
  string password = 1;
}

message ConfirmPasswordResponse {
  bool confirmed = 1;
}

// ------------------------------
// Verify Email
// ------------------------------
message VerifyEmailRequest {
  string user_id = 1;
  string verification_token = 2;
}

message VerifyEmailResponse {
  bool verified = 1;
}

// ------------------------------
// Auth Service (orchestrator using existing repos)
// ------------------------------
service AuthService {
  // Login user → uses UserRepository + SessionRepository
  rpc Login(LoginRequest) returns (LoginResponse);

  // Logout user → uses SessionRepository
  rpc Logout(LogoutRequest) returns (Empty);

  // Register user → uses UserRepository + RoleRepository
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Send password reset email → uses PasswordResetRepository
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);

  // Reset password using token → uses PasswordResetRepository + UserRepository
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);

  // Confirm current password → uses UserRepository
  rpc ConfirmPassword(ConfirmPasswordRequest) returns (ConfirmPasswordResponse);

  // Verify email → optional new table email_verifications
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse);
}
